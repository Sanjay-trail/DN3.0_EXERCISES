-- Package specification
CREATE OR REPLACE PACKAGE AccountOperations AS
    PROCEDURE OpenNewAccount(
        p_account_id IN Accounts.AccountID%TYPE,
        p_customer_id IN Accounts.CustomerID%TYPE,
        p_account_type IN Accounts.AccountType%TYPE,
        p_balance IN Accounts.Balance%TYPE,
        p_last_modified IN Accounts.LastModified%TYPE);
    
    PROCEDURE CloseAccount(
        p_account_id IN Accounts.AccountID%TYPE);
    
    FUNCTION GetTotalBalance(
        p_customer_id IN Accounts.CustomerID%TYPE)
        RETURN NUMBER;
END AccountOperations;
/

-- Package body
CREATE OR REPLACE PACKAGE BODY AccountOperations AS
    PROCEDURE OpenNewAccount(
        p_account_id IN Accounts.AccountID%TYPE,
        p_customer_id IN Accounts.CustomerID%TYPE,
        p_account_type IN Accounts.AccountType%TYPE,
        p_balance IN Accounts.Balance%TYPE,
        p_last_modified IN Accounts.LastModified%TYPE) IS
    BEGIN
        INSERT INTO Accounts (AccountID, CustomerID, AccountType, Balance, LastModified)
        VALUES (p_account_id, p_customer_id, p_account_type, p_balance, p_last_modified);
        
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error: Account with ID ' || p_account_id || ' already exists.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END OpenNewAccount;
    
    PROCEDURE CloseAccount(
        p_account_id IN Accounts.AccountID%TYPE) IS
    BEGIN
        DELETE FROM Accounts
        WHERE AccountID = p_account_id;
        
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END CloseAccount;
    
    FUNCTION GetTotalBalance(
        p_customer_id IN Accounts.CustomerID%TYPE)
        RETURN NUMBER IS
        v_total_balance NUMBER;
    BEGIN
        SELECT SUM(Balance) INTO v_total_balance
        FROM Accounts
        WHERE CustomerID = p_customer_id;
        
        RETURN v_total_balance;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            RETURN NULL;
    END GetTotalBalance;
END AccountOperations;
/
