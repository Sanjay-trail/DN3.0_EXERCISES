-- Package specification
CREATE OR REPLACE PACKAGE EmployeeManagement AS
    PROCEDURE HireEmployee(
        p_employee_id IN Employees.EmployeeID%TYPE,
        p_name IN Employees.Name%TYPE,
        p_position IN Employees.Position%TYPE,
        p_salary IN Employees.Salary%TYPE,
        p_department IN Employees.Department%TYPE,
        p_hire_date IN Employees.HireDate%TYPE);
    
    PROCEDURE UpdateEmployeeDetails(
        p_employee_id IN Employees.EmployeeID%TYPE,
        p_name IN Employees.Name%TYPE,
        p_position IN Employees.Position%TYPE,
        p_salary IN Employees.Salary%TYPE,
        p_department IN Employees.Department%TYPE,
        p_hire_date IN Employees.HireDate%TYPE);
    
    FUNCTION CalculateAnnualSalary(
        p_employee_id IN Employees.EmployeeID%TYPE)
        RETURN NUMBER;
END EmployeeManagement;
/

-- Package body
CREATE OR REPLACE PACKAGE BODY EmployeeManagement AS
    PROCEDURE HireEmployee(
        p_employee_id IN Employees.EmployeeID%TYPE,
        p_name IN Employees.Name%TYPE,
        p_position IN Employees.Position%TYPE,
        p_salary IN Employees.Salary%TYPE,
        p_department IN Employees.Department%TYPE,
        p_hire_date IN Employees.HireDate%TYPE) IS
    BEGIN
        INSERT INTO Employees (EmployeeID, Name, Position, Salary, Department, HireDate)
        VALUES (p_employee_id, p_name, p_position, p_salary, p_department, p_hire_date);
        
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error: Employee with ID ' || p_employee_id || ' already exists.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END HireEmployee;
    
    PROCEDURE UpdateEmployeeDetails(
        p_employee_id IN Employees.EmployeeID%TYPE,
        p_name IN Employees.Name%TYPE,
        p_position IN Employees.Position%TYPE,
        p_salary IN Employees.Salary%TYPE,
        p_department IN Employees.Department%TYPE,
        p_hire_date IN Employees.HireDate%TYPE) IS
    BEGIN
        UPDATE Employees
        SET Name = p_name, Position = p_position, Salary = p_salary, Department = p_department, HireDate = p_hire_date
        WHERE EmployeeID = p_employee_id;
        
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END UpdateEmployeeDetails;
    
    FUNCTION CalculateAnnualSalary(
        p_employee_id IN Employees.EmployeeID%TYPE)
        RETURN NUMBER IS
        v_monthly_salary Employees.Salary%TYPE;
    BEGIN
        SELECT Salary INTO v_monthly_salary
        FROM Employees
        WHERE EmployeeID = p_employee_id;
        
        RETURN v_monthly_salary * 12;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            RETURN NULL;
    END CalculateAnnualSalary;
END EmployeeManagement;
/
