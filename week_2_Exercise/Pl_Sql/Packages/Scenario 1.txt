-- Package specification
CREATE OR REPLACE PACKAGE CustomerManagement AS
    PROCEDURE AddNewCustomer(
        p_customer_id IN Customers.CustomerID%TYPE,
        p_name IN Customers.Name%TYPE,
        p_dob IN Customers.DOB%TYPE,
        p_balance IN Customers.Balance%TYPE,
        p_last_modified IN Customers.LastModified%TYPE);
    
    PROCEDURE UpdateCustomerDetails(
        p_customer_id IN Customers.CustomerID%TYPE,
        p_name IN Customers.Name%TYPE,
        p_dob IN Customers.DOB%TYPE,
        p_balance IN Customers.Balance%TYPE,
        p_last_modified IN Customers.LastModified%TYPE);
    
    FUNCTION GetCustomerBalance(
        p_customer_id IN Customers.CustomerID%TYPE)
        RETURN NUMBER;
END CustomerManagement;
/

-- Package body
CREATE OR REPLACE PACKAGE BODY CustomerManagement AS
    PROCEDURE AddNewCustomer(
        p_customer_id IN Customers.CustomerID%TYPE,
        p_name IN Customers.Name%TYPE,
        p_dob IN Customers.DOB%TYPE,
        p_balance IN Customers.Balance%TYPE,
        p_last_modified IN Customers.LastModified%TYPE) IS
    BEGIN
        INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
        VALUES (p_customer_id, p_name, p_dob, p_balance, p_last_modified);
        
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error: Customer with ID ' || p_customer_id || ' already exists.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END AddNewCustomer;
    
    PROCEDURE UpdateCustomerDetails(
        p_customer_id IN Customers.CustomerID%TYPE,
        p_name IN Customers.Name%TYPE,
        p_dob IN Customers.DOB%TYPE,
        p_balance IN Customers.Balance%TYPE,
        p_last_modified IN Customers.LastModified%TYPE) IS
    BEGIN
        UPDATE Customers
        SET Name = p_name, DOB = p_dob, Balance = p_balance, LastModified = p_last_modified
        WHERE CustomerID = p_customer_id;
        
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END UpdateCustomerDetails;
    
    FUNCTION GetCustomerBalance(
        p_customer_id IN Customers.CustomerID%TYPE)
        RETURN NUMBER IS
        v_balance NUMBER;
    BEGIN
        SELECT Balance INTO v_balance
        FROM Customers
        WHERE CustomerID = p_customer_id;
        
        RETURN v_balance;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            RETURN NULL;
    END GetCustomerBalance;
END CustomerManagement;
/
